name: Receive Time and Schedule Telegram Message

on:
  workflow_dispatch:
    inputs:
      time:
        description: 'Time to send message (format: HH:MM AM/PM, e.g., 01:30 PM)'
        required: true
      message:
        description: 'Message to send'
        required: true
      minutes_before:
        description: 'Minutes before time'
        required: false
        default: '0'
        
# Add this permissions block
permissions:
  contents: write
  actions: write
  
jobs:
  schedule-message:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Calculate schedule time and create workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        INPUT_TIME: ${{ github.event.inputs.time }}
        INPUT_MESSAGE: ${{ github.event.inputs.message }}
        MINUTES_BEFORE: ${{ github.event.inputs.minutes_before }}
      run: |
        python - << EOF
        import os
        from datetime import datetime, timedelta
        import requests
        import urllib.parse

        def parse_time(time_str):
            now = datetime.now()
            try:
                # Parse the time string
                parsed_time = datetime.strptime(time_str, "%I:%M %p")
                # Combine with today's date
                return now.replace(hour=parsed_time.hour, minute=parsed_time.minute, second=0, microsecond=0)
            except ValueError:
                # If parsing fails, use current time + 1 hour
                return now + timedelta(hours=1)

        # Parse the input time, use default if not provided
        input_time_str = os.environ.get('INPUT_TIME') or '12:00 PM'
        input_time = parse_time(input_time_str)
        
        # If the parsed time is in the past, add 1 day
        if input_time < datetime.now():
            input_time += timedelta(days=1)
        
        # Calculate the time 50 minutes earlier
        schedule_time = input_time - timedelta(minutes=int( os.environ.get('MINUTES_BEFORE')))
        
        # Format the time for POSIX cron (GitHub Actions uses UTC)
        cron_time = schedule_time.strftime('%M %H %d %m *')
        input_time_str = os.environ.get('INPUT_TIME') or '12:00 PM'
        message = os.environ.get('INPUT_MESSAGE') or 'Default message'
           
        # URL encode the message
        encoded_message = urllib.parse.quote(message)
        
        # Create the workflow file content
        workflow_content = f'''
        name: Send Scheduled Telegram Message

        on:
          schedule:
            - cron: '{cron_time}'

        jobs:
          send-message:
            runs-on: ubuntu-latest
            steps:
            - name: Send Telegram message
              run: |
                curl -X GET "https://api.telegram.org/bot7539882862:AAFKE5inZILcaE7DYb1Vq85XUmjwRhTtyXE/sendMessage?chat_id=5616711824&text={encoded_message}"
        '''
        
        # Save the workflow file
        with open('.github/workflows/send_scheduled_telegram_message.yml', 'w') as f:
            f.write(workflow_content)
        
        # Commit and push the new workflow file
        os.system('git config --local user.email "github-actions[bot]@users.noreply.github.com"')
        os.system('git config --local user.name "github-actions[bot]"')
        os.system('git add .github/workflows/send_scheduled_telegram_message.yml')
        os.system('git commit -m "Add scheduled Telegram message workflow"')
        os.system('git push')
        
        print(f"Scheduled Telegram message to be sent at {schedule_time}")
        EOF
