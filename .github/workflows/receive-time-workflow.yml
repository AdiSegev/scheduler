name: Receive and Schedule Message from Comment

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  actions: write

jobs:
  process-comment:
    runs-on: ubuntu-latest
    steps:
    - name: Check if comment is on the specified issue
      id: check-comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_NUMBER=123  # Replace with your specific issue number
        if [ "${{ github.event.issue.number }}" = "$ISSUE_NUMBER" ]; then
          echo "::set-output name=is_target_issue::true"
          echo "::set-output name=comment_body::${{ github.event.comment.body }}"
        else
          echo "::set-output name=is_target_issue::false"
        fi

    - name: Parse comment and schedule message
      if: steps.check-comment.outputs.is_target_issue == 'true'
      id: parse-comment
      run: |
        COMMENT_BODY="${{ steps.check-comment.outputs.comment_body }}"
        
        # Use Python for more robust parsing
        python3 << EOF
import re
import sys

comment = """$COMMENT_BODY"""

# Use regex to find the time, message, and minutes
time_match = re.search(r'(\d{1,2}:\d{2} [AP]M)', comment)
message_match = re.search(r'(?<=\d{1,2}:\d{2} [AP]M\n)(.+?)(?=\n\d+|$)', comment, re.DOTALL)
minutes_match = re.search(r'(\d+)\s*$', comment)

if time_match and message_match and minutes_match:
    print(f"::set-output name=time::{time_match.group(1)}")
    print(f"::set-output name=message::{message_match.group(1).strip()}")
    print(f"::set-output name=minutes_before::{minutes_match.group(1)}")
else:
    print("Error: Could not parse all required fields from the comment.", file=sys.stderr)
    sys.exit(1)
EOF

    - name: Debug output
      if: steps.check-comment.outputs.is_target_issue == 'true'
      run: |
        echo "Time: ${{ steps.parse-comment.outputs.time }}"
        echo "Message: ${{ steps.parse-comment.outputs.message }}"
        echo "Minutes Before: ${{ steps.parse-comment.outputs.minutes_before }}"

    - name: Calculate schedule time
      if: steps.check-comment.outputs.is_target_issue == 'true'
      id: calculate-time
      run: |
        python << EOF
        from datetime import datetime, timedelta
        import pytz
        import sys
        
        def parse_time(time_str, minutes_before):
            try:
                israel_tz = pytz.timezone('Asia/Jerusalem')
                now = datetime.now(israel_tz)
                parsed_time = datetime.strptime(time_str, "%I:%M %p")
                schedule_time = now.replace(hour=parsed_time.hour, minute=parsed_time.minute, second=0, microsecond=0)
                if schedule_time < now:
                    schedule_time += timedelta(days=1)
                trigger_time = schedule_time - timedelta(minutes=int(minutes_before))
                return schedule_time, trigger_time
            except ValueError as e:
                print(f"Error parsing time or minutes: {e}", file=sys.stderr)
                sys.exit(1)
        
        time_str = "${{ steps.parse-comment.outputs.time }}"
        minutes_before = "${{ steps.parse-comment.outputs.minutes_before }}"
        schedule_time, trigger_time = parse_time(time_str, minutes_before)
        print(f"::set-output name=schedule_time::{schedule_time.isoformat()}")
        print(f"::set-output name=trigger_time::{trigger_time.isoformat()}")
        EOF

    # ... rest of the workflow remains the same
