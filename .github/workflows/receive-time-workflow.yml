name: Receive and Schedule Message from Comment

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  actions: write

jobs:
  process-comment:
    runs-on: ubuntu-latest
    steps:
    - name: Check if comment is on the specified issue
      id: check-comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_NUMBER=123  # Replace with your specific issue number
        if [ "${{ github.event.issue.number }}" = "$ISSUE_NUMBER" ]; then
          echo "::set-output name=is_target_issue::true"
          echo "::set-output name=comment_body::${{ github.event.comment.body }}"
        else
          echo "::set-output name=is_target_issue::false"
        fi

    - name: Parse comment and schedule message
      if: steps.check-comment.outputs.is_target_issue == 'true'
      id: parse-comment
      run: |
        COMMENT_BODY="${{ steps.check-comment.outputs.comment_body }}"
        TIME=$(echo "$COMMENT_BODY" | sed -n '1p')
        MESSAGE=$(echo "$COMMENT_BODY" | sed -n '2p')
        MINUTES_BEFORE=$(echo "$COMMENT_BODY" | sed -n '3p')
        
        echo "::set-output name=time::$TIME"
        echo "::set-output name=message::$MESSAGE"
        echo "::set-output name=minutes_before::$MINUTES_BEFORE"

    - name: Calculate schedule time
      if: steps.check-comment.outputs.is_target_issue == 'true'
      id: calculate-time
      run: |
        python << EOF
        from datetime import datetime, timedelta
        import pytz
        
        def parse_time(time_str, minutes_before):
            israel_tz = pytz.timezone('Asia/Jerusalem')
            now = datetime.now(israel_tz)
            parsed_time = datetime.strptime(time_str, "%I:%M %p")
            schedule_time = now.replace(hour=parsed_time.hour, minute=parsed_time.minute, second=0, microsecond=0)
            if schedule_time < now:
                schedule_time += timedelta(days=1)
            trigger_time = schedule_time - timedelta(minutes=minutes_before)
            return schedule_time, trigger_time
        
        time_str = "${{ steps.parse-comment.outputs.time }}"
        minutes_before = int("${{ steps.parse-comment.outputs.minutes_before }}")
        schedule_time, trigger_time = parse_time(time_str, minutes_before)
        print(f"::set-output name=schedule_time::{schedule_time.isoformat()}")
        print(f"::set-output name=trigger_time::{trigger_time.isoformat()}")
        EOF

    - name: Wait until trigger time
      if: steps.check-comment.outputs.is_target_issue == 'true'
      id: wait-until-time
      env:
        TZ: Asia/Jerusalem
      run: |
        schedule_time="${{ steps.calculate-time.outputs.schedule_time }}"
        trigger_time="${{ steps.calculate-time.outputs.trigger_time }}"
        echo "Scheduled time (Israel): $schedule_time"
        echo "Trigger time (Israel): $trigger_time"
        while true; do
          current_time=$(date +"%Y-%m-%dT%H:%M:%S%z")
          echo "Current time (Israel): $current_time"
          if [ "$current_time" \> "$trigger_time" ]; then
            echo "Current time has surpassed trigger time, breaking loop."
            break
          fi
          sleep 60
        done

    - name: Trigger repository dispatch
      if: steps.check-comment.outputs.is_target_issue == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MESSAGE: ${{ steps.parse-comment.outputs.message }}
      run: |
        curl -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type": "send_telegram_message", "client_payload": {"message": "'"$MESSAGE"'"}}'
        echo "Repository dispatch triggered"
